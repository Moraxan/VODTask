@inject IAdminService AdminService
<h3>@Navigation</h3>

@if (Alert != string.Empty)
{
	<div class="d-flex">
		<div class="alert alert-danger alert dismissable fade show" role="alert">
			<strong>@Alert</strong>
			<button type="button" @onclick="CloseAlert" class="btn-close" data-bs-dismiss="alert"/>
		</div>
	</div>
}
	<div class="d-flex me-1">
		<a href="/" class="btn btn-outline-secondary rounded-0 me-1">Home</a>
		<button type="button" class="btn btn-primary rounded-0 me-1" @onclick="()=>ChangePageType(PageTypes.Index)">Index</button>
	<button type="button" class="btn btn-primary rounded-0 me-1" @onclick="()=>ChangePageType(PageTypes.Create)">Create</button>
	</div>

	<FilmsIndex OnClick="OnClick" Model="Model"></FilmsIndex>

@code {
	List<FilmDTO> Model { get; set; } = new();
	string Alert = string.Empty;
	string Navigation = string.Empty;

	void ChangePageType(string pageType) => Navigation = pageType;
	void CloseAlert() => Alert = string.Empty;

	protected override async Task OnInitializedAsync()

	{
		Alert = "test";// string.Empty;
		Model = await AdminService.GetAsync<FilmDTO>($"films?freeonly=false");
		//var film = await AdminService.SingleAsync<FilmDTO>($"films/1006");
	}

	async Task OnClick(ClickModel model )
	{
		ChangePageType(model.PageType);
	}
}